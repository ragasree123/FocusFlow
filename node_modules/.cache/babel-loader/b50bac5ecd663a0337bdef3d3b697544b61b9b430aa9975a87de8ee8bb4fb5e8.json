{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ragasree\\\\focusflow-tailwind-react-starter\\\\src\\\\components\\\\TaskList.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport TaskItem from \"./TaskItem\";\nimport Stats from \"./Stats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskList() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n\n  // ⬇ Load tasks from LocalStorage on first load\n  useEffect(() => {\n    const stored = localStorage.getItem(\"focusflow-tasks\");\n    if (stored) {\n      setTasks(JSON.parse(stored));\n    }\n  }, []);\n\n  // ⬆ Save tasks to LocalStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem(\"focusflow-tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n  const addTask = () => {\n    if (newTask.trim()) {\n      setTasks([...tasks, {\n        text: newTask,\n        done: false\n      }]);\n      setNewTask(\"\");\n    }\n  };\n  const toggleTask = index => {\n    const updated = [...tasks];\n    updated[index].done = !updated[index].done;\n    setTasks(updated);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-4 py-2 bg-gradient-to-r from-green-400 to-lime-500 text-white rounded shadow hover:from-green-500 hover:to-lime-600 transition-all\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Add a task...\",\n        className: \"flex-1 px-3 py-2 text-black rounded\",\n        value: newTask,\n        onChange: e => setNewTask(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTask,\n        className: \"px-4 bg-green-600 rounded hover:bg-green-700\",\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-2\",\n      children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: task,\n        onToggle: () => toggleTask(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stats, {\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"6pTReirRKU6zFAHqfYHrd7sboTg=\");\n_c = TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useState","useEffect","TaskItem","Stats","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","newTask","setNewTask","stored","localStorage","getItem","JSON","parse","setItem","stringify","addTask","trim","text","done","toggleTask","index","updated","children","className","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","task","onToggle","_c","$RefreshReg$"],"sources":["D:/Ragasree/focusflow-tailwind-react-starter/src/components/TaskList.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport TaskItem from \"./TaskItem\";\r\nimport Stats from \"./Stats\";\r\n\r\n\r\nexport default function TaskList() {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [newTask, setNewTask] = useState(\"\");\r\n\r\n  // ⬇ Load tasks from LocalStorage on first load\r\n  useEffect(() => {\r\n    const stored = localStorage.getItem(\"focusflow-tasks\");\r\n    if (stored) {\r\n      setTasks(JSON.parse(stored));\r\n    }\r\n  }, []);\r\n\r\n  // ⬆ Save tasks to LocalStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem(\"focusflow-tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const addTask = () => {\r\n    if (newTask.trim()) {\r\n      setTasks([...tasks, { text: newTask, done: false }]);\r\n      setNewTask(\"\");\r\n    }\r\n  };\r\n\r\n  const toggleTask = (index) => {\r\n    const updated = [...tasks];\r\n    updated[index].done = !updated[index].done;\r\n    setTasks(updated);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"px-4 py-2 bg-gradient-to-r from-green-400 to-lime-500 text-white rounded shadow hover:from-green-500 hover:to-lime-600 transition-all\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Add a task...\"\r\n          className=\"flex-1 px-3 py-2 text-black rounded\"\r\n          value={newTask}\r\n          onChange={(e) => setNewTask(e.target.value)}\r\n        />\r\n        <button\r\n          onClick={addTask}\r\n          className=\"px-4 bg-green-600 rounded hover:bg-green-700\"\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n\r\n      <ul className=\"space-y-2\">\r\n        {tasks.map((task, index) => (\r\n          <TaskItem key={index} task={task} onToggle={() => toggleTask(index)} />\r\n        ))}\r\n      </ul>\r\n\t\t<Stats tasks={tasks} />\r\n\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}